#!/usr/bin/env python3

__email__ = "conrad.shyu@nih.gov"
__author__ = "Conrad Shyu"
__version__ = "2.2"
__branch__ = "Bioinformatics and Computational Biosciences Branch"
__company__ = "National Institute of Allergy and Infectious Diseases"
__address__ = "5601 Fishers Lane, Rockville, MD 20852"
__update__ = "10/25/2019"
__project__ = "METAGENOTE"

import os
import sys
import json
import datetime
import argparse
import subprocess
import xml.dom.minidom
import xml.etree.ElementTree as ET

""" generate the XML file for submission to NCBI """
class SubmitXML():
    def __init__(self, org = "NIAID Bioinformatics and Computational Biosciences Branch"):
        """
        generate the XML file for SRA submission
        """
        self.root = ET.Element('Submission')
        self.org = org
        self.library = {}   # library details
        self.fastq = {}     # list of fastq files
        self.sample = {}    # sample attributes
        self.project = {}   # project details
        self.package = ""   # package name

    def ReadFile(self, xf):
        """
        read the contents of a file
        """
        lines = []
        with open(xf, "r") as f:
            for r in f.readlines():
                if len(r.strip()) is 0:
                    continue
                lines.append(r.strip())
        return(lines)

    def GetFASTQ(self, fq):
        """
        list of FASTQ files and associated attributes; sample name as key, fastq files as list
        """
        fastq = {}
        for r in self.ReadFile(fq):
            fq = r.split(",")
            fastq[(fq[0]).strip()] = [q.strip() for q in fq[1:]]
        return(fastq)

    def GetAttribute(self, sg):
        """
        sample metadata; sample name as key, attributes as dictionary
        """
        attr = {}
        lines = self.ReadFile(sg)
        keys = [k.strip() for k in (lines[1]).split("\t")]
        for r in lines[2:]:
            v = r.split("\t")
            attr[(v[0]).strip()] = dict(zip(keys[1:], [i.strip() for i in v[1:]]))
        return(attr)

    def GetProject(self, pj):
        """ project information """
        proj = {}
        for r in self.ReadFile(pj):
            p = r.split("\t")
            proj[(p[0]).strip()] = (p[1]).strip()
        return(proj)

    def GetPackage(self, sg):
        """ return the package name """
        return((self.ReadFile(sg)[0]).strip("# \n"))

    def SetElement(self, tag, text = "", attr = {}, child = []):
        """ set the basic XML element """
        xt = ET.Element(tag, attrib = attr)
        xt.text = text

        for i in child:
            xt.append(i)

        return(xt)      # end of SetElement

    def SetDescription(self, email, user = "NIAID-BCBB", first = "NIAID", last = "BCBB",
        date = datetime.datetime.now().strftime("%Y-%m-%d")):
        """ set the submission description """
        self.root.append(self.SetElement("Description", "", {}, [
            self.SetElement("Comment", "New submission. Generated by METAGENOTE on %s" % datetime.datetime.now().strftime("%A %B %d %Y %X")),
            self.SetElement("Submitter", "", {"user_name": user}),
            self.SetElement("Organization", "", {"role": "owner", "type": "center"}, [
                self.SetElement("Name", self.org),
                self.SetElement("Contact", "", {"email": email}, [
                    self.SetElement("Name", "", {}, [
                        self.SetElement("First", first),
                        self.SetElement("Last", last)])])
                ]),
            self.SetElement("Hold", "", {"release_date": date})
            ]))

        return(True)    # end of SetDescription

    def SetDescriptor(self, title, desc, url):
        """ auxiliary for external resources """
        xm = []
        xm.append(self.SetElement("Title", title))
        xm.append(self.SetElement("Description", "", {}, [self.SetElement(
            "p", desc + " This submission was powered by METAGENOTE (https://metagenote.niaid.nih.gov).")]))

        for k, v in (json.loads(url)).items():
            xm.append(self.SetElement("ExternalLink", "", {"label": k}, [self.SetElement("URL", v)]))

        return(xm)      # end of SetDescriptor

    def SetBioProject(self, title, name, desc, data,
        url = '{"METAGENOTE": "https://metagenote.niaid.nih.gov"}'):
        """ set the biosample records """
        self.root.append(self.SetElement("Action", "", {}, [
            self.SetElement("AddData", "", {"target_db": "BioProject"}, [
                self.SetElement("Data", "", {"content_type": "XML"}, [
                    self.SetElement("XmlContent", "", {}, [
                        self.SetElement("Project", "", {"schema_version": "2.0"}, [
                            self.SetElement("ProjectID", "", {}, [
                                self.SetElement("SPUID", name, {"spuid_namespace": self.org})]),
                            self.SetElement("Descriptor", "", {},
                                self.SetDescriptor(title, desc, url)),      # title, description and external resources
                            self.SetElement("ProjectType", "", {}, [
                                self.SetElement("ProjectTypeSubmission", "", {"sample_scope": "eEnvironment"}, [
                                    self.SetElement("IntendedDataTypeSet", "", {}, [self.SetElement("DataType", data)])])])
                        ])])]),
                self.SetElement("Identifier", "", {}, [
                    self.SetElement("SPUID", name, {"spuid_namespace": self.org})])
                ])]))

        return(True)    # end of SetBioProject

    def SetBioSample(self, title, spuid, sid, name, pkg, attr = {}):
        """ biosample section """
        rf = [
            self.SetElement("SampleId", "", {}, [
                self.SetElement("SPUID", sid, {"spuid_namespace": self.org})]),
            self.SetElement("Descriptor", "", {}, [
                self.SetElement("Title", title),
                self.SetElement("Description", "", {}, [
                    self.SetElement("p", spuid)])
                ]),
            self.SetElement("Organism", "", {}, [
                self.SetElement("OrganismName", name)]),
            self.SetElement("Package", pkg),
            self.SetElement("Attributes", "", {}, [
                self.SetElement("Attribute", attr[k], {"attribute_name": k}) for k in sorted(attr.keys())])]

        if "bioproject_accession" in attr:
            a = [self.SetElement("BioProject", "", {}, [
                self.SetElement("PrimaryId", attr["bioproject_accession"], {"db": "BioProject"})])]
            rf = rf[:3] + a + rf[3:]

        self.root.append(self.SetElement("Action", "", {}, [
            self.SetElement("AddData", "", {"target_db": "BioSample"}, [
                self.SetElement("Data", "", {"content_type": "XML"}, [
                    self.SetElement("XmlContent", "", {}, [
                        self.SetElement("BioSample", "", {"schema_version": "2.0"}, rf)])]),
                self.SetElement("Identifier", "", {}, [
                    self.SetElement("SPUID", sid, {"spuid_namespace": self.org})])
            ])]))

        return(True)    # end of SetBiosample

    def SetFASTQ(self, fastq, title, sid, attr):
        """ FASTQ files and sequencing instrument """
        # list of FASTQ files
        fq = [self.SetElement("File", "", {"file_path": f}, [
            self.SetElement("DataType", "generic-data")]) for f in fastq]

        # instrument and library attributes
        attr["library_name"] = "%s.%s" % (fastq[0], sid)
        at = [self.SetElement("Attribute", attr[k], {"name": k}) for k in attr.keys()]

        # supplemental information
        rf = [
            self.SetElement("AttributeRefId", "", {"name": "BioProject"}, [
                self.SetElement("RefId", "", {}, [
                    self.SetElement("SPUID", title, {"spuid_namespace": self.org})])]),
            self.SetElement("AttributeRefId", "", {"name": "BioSample"}, [
                self.SetElement("RefId", "", {}, [
                    self.SetElement("SPUID", sid, {"spuid_namespace": self.org})])]),
            self.SetElement("Identifier", "", {}, [
                self.SetElement("LocalId", "%s.%s" % (fastq[0], sid))])]

        self.root.append(self.SetElement("Action", "", {}, [
            self.SetElement("AddFiles", "", {"target_db": "SRA"}, fq + at + rf)]))

        return(True)    # end of SetFASTQ

    def Print(self):
        print((xml.dom.minidom.parseString(ET.tostring(self.root))).toprettyxml(indent = "    ", newl = "\n"))

    def Write(self, name = "submission.xml"):
        #(ET.ElementTree(root)).write("submission.xml", encoding="UTF-8", method="xml")
        with open(name, "w") as to_xml:
            to_xml.write((xml.dom.minidom.parseString(ET.tostring(self.root))).toprettyxml(indent = "    ", newl = "\n"))

    def Run(self, lb, lf = "listfile.txt", pj = "project.txt", sg = "samplegroup.txt"):
        # main driver function
        library = lb
        fastq = self.GetFASTQ(lf)       # list of FASTQ files
        sample = self.GetAttribute(sg)  # sample attributes
        project = self.GetProject(pj)   # project details
        package = self.GetPackage(sg)   # package name

        k = next(iter(sample))
        library["library_construction_protocol"] = (sample[k])["lib_const_meth"] if "lib_const_meth" in sample[k] else "missing"

        self.SetDescription(
            project["Email"],           # email address
            project["Username"],        # username
            project["First"],           # first name
            project["Last"],            # last name
            project["Release"])         # hold release date

        if "bioproject_accession" not in sample[k]:
            self.SetBioProject(
                project["ProjectTitle"],    # project title
                project["ProjectName"],     # project name
                project["Description"],     # project description
                library["datatype"],        # project datatype
                project["Resource"])        # external resources

        # set biosample section
        for k, v in sample.items():
            name = ""

            if "organism" in v:
                name = v["organism"]
                del v["organism"]           # not appear as an attribute
            else:
                name = "not applicable"

            self.SetBioSample(v["sample_title"], v["description"], k, name, package, v)

        # set fastq file section
        for k, v in fastq.items():
            self.SetFASTQ(v, project["ProjectName"], k, library)

"""
auxiliary functions
"""
def SaveEmail(pf):
    # first, load the file into memory
    with open(pf, "r") as rf:
        lines = rf.readlines()

    # then, write the contents back without the last line
    with open(pf, "w") as wf:
        ue = (lines[len(lines) - 1]).strip()
        wf.writelines([item for item in lines[:-1]])

    # write the email address to a file
    with open(os.path.join(os.path.dirname(pf), ".user-email"), "w") as ef:
        ef.write(ue)

    return(ue)

def CheckStatus(f):
    """ check the status of validate.xml """
    t = ET.ElementTree(file = f)
    s = {"processed-error": False, "failed": False, "processed-ok": True, "submitted": False, "processing": False}
    return(s["%s" % (t.getroot()).find("Action").attrib["status"]])

def ValidateLog(x, f):
    """ output the validate.xml content to logfile """
    t = (ET.ElementTree(file = x)).getroot()
    with open(f, "w") as fl:
        fl.write("message: %s\n" % t.find("Action/Response/Message").text)
        fl.write("sample_id: %s\n" % t.find("Action/Response/Object").attrib["spuid"])


def main(argv):
    validate_xml = os.path.join(os.path.dirname(argv.project), "validate.xml")
    submit_xml = os.path.join(argv.input_dir, "submission.xml")

    #SaveEmail(args.project) # save the user email address

    ncbi = SubmitXML()      # generate the XML file for SRA submission
    ncbi.Run({
        "datatype": argv.datatype.lower(),
        "library_selection": argv.libselection,
        "library_strategy": argv.libstrategy,
        "library_layout": "paired",
        "library_source": argv.libsource,
        "instrument_platform": argv.platform,
        "instrument_model": argv.instrument},
        argv.listfile, argv.project, argv.samplegroup)
    ncbi.Write(submit_xml)

    with open(validate_xml, "w") as rp:
        subprocess.call(["curl", "-X", "POST", "-d", "@%s" % submit_xml,
            "https://www.ncbi.nlm.nih.gov/projects/biosample/validate/"], stdout = rp)

    return(True)

if __name__ == '__main__':
    argv = argparse.ArgumentParser(description = "Generate XML file for submission to NCBI SRA.",
        formatter_class = argparse.ArgumentDefaultsHelpFormatter, epilog = """
        This program is free software: you can redistribute it and/or modify it under the terms of
        the GNU General Public License as published by the Free Software Foundation, either version
        3 of the License, or (at your option) any later version. This program is distributed in the
        hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
        more details. You should have received a copy of the GNU General Public License along with
        this program. If not, see <http://www.gnu.org/licenses/>.""")
    argv.add_argument('-f', '--input-dir', dest = 'input_dir', required = True,
        help = 'Diretory where all of your FASTQ files are located.')
    argv.add_argument('-l', '--listfile', type = str, dest = 'listfile', default = "listfile.txt",
        help = 'Name of the list file containing your sample ID to file mapping. Default: listfile.txt.')
    argv.add_argument('-e', '--email', dest = 'email', default = "metagenote@mail.nih.gov",
        help = 'Eamil address for submission notification. Default: metagenote@mail.nih.gov.')
    argv.add_argument('-p', '--projectfile', type = str, dest = 'project', default = "project.txt",
        help = 'Name of the file describing your project. Default: project.txt.')
    argv.add_argument('-m', '--metadatafile', type = str, dest = 'samplegroup', default = "samplegroup.txt",
        help = 'Name of the mimark metadata file. Default: samplegroup.txt.')

    # the following command line parameters were added by Conrad Shyu, July 3, 2017
    argv.add_argument('-a', '--platform', dest = 'platform', default = 'Illumina',
        help = 'Specify platform you are using for sequencing. Default: illumina.')
    argv.add_argument('-o', '--orientation', dest = 'orientation', default = 'forward',
        help = 'Specify sequence orientation. Default: forward.')
    argv.add_argument('-s', '--libstrategy', dest = 'libstrategy', default = 'amplicon',
        help = 'Specify library strategy. Default: amplicon.')
    argv.add_argument('-t', '--datatype', dest = 'datatype', default = 'metagenome',
        help = 'Specify datatype. Default: metagenome.')
    argv.add_argument('-r', '--libsource', dest = 'libsource', default = 'metagenomic',
        help = 'Specify library source. Default: metagenomic.')
    argv.add_argument('-n', '--instrument', dest = 'instrument', default = 'Illumina MiSeq',
        help = "Specify instrument. Default: Illumina MiSeq.")
    argv.add_argument('-b', '--libselection', dest = 'libselection', default = 'PCR',
        help = "Specify library selection. Default: PCR.")

    sys.exit(not main(argv.parse_args()))
